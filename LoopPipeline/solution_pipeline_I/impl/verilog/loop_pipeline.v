// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_pipeline_loop_pipeline,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.959500,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=440,HLS_VERSION=2022_2}" *)

module loop_pipeline (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [4:0] A_q0;
output  [4:0] A_address1;
output   A_ce1;
input  [4:0] A_q1;
output  [19:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] A_address0;
reg A_ce0;
reg[4:0] A_address1;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [19:0] acc_V;
reg   [4:0] reg_253;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [4:0] reg_258;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp4_fu_270_p2;
reg   [5:0] tmp4_reg_550;
wire   [6:0] tmp5_fu_298_p2;
reg   [6:0] tmp5_reg_575;
wire   [7:0] tmp1_fu_318_p2;
reg   [7:0] tmp1_reg_590;
wire   [5:0] tmp8_fu_324_p2;
reg   [5:0] tmp8_reg_595;
wire    ap_CS_fsm_state6;
wire   [6:0] tmp9_fu_352_p2;
reg   [6:0] tmp9_reg_610;
wire    ap_CS_fsm_state7;
wire   [8:0] tmp_fu_385_p2;
reg  signed [8:0] tmp_reg_625;
wire   [5:0] tmp13_fu_391_p2;
reg   [5:0] tmp13_reg_630;
wire   [6:0] tmp14_fu_419_p2;
reg   [6:0] tmp14_reg_655;
wire   [7:0] tmp12_fu_439_p2;
reg   [7:0] tmp12_reg_670;
wire   [5:0] tmp17_fu_445_p2;
reg   [5:0] tmp17_reg_675;
wire   [6:0] tmp18_fu_473_p2;
reg   [6:0] tmp18_reg_680;
wire    ap_CS_fsm_state11;
wire   [8:0] tmp11_fu_498_p2;
reg  signed [8:0] tmp11_reg_685;
wire    ap_CS_fsm_state12;
wire  signed [19:0] grp_fu_519_p4;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state15;
wire  signed [5:0] sext_ln24_1_fu_266_p1;
wire  signed [5:0] sext_ln24_fu_262_p1;
wire  signed [5:0] sext_ln24_3_fu_280_p1;
wire  signed [5:0] sext_ln24_4_fu_284_p1;
wire   [5:0] tmp6_fu_288_p2;
wire  signed [6:0] tmp6_cast_fu_294_p1;
wire  signed [6:0] sext_ln24_2_fu_276_p1;
wire  signed [7:0] tmp5_cast_fu_315_p1;
wire  signed [7:0] tmp4_cast_fu_312_p1;
wire  signed [5:0] sext_ln24_5_fu_304_p1;
wire  signed [5:0] sext_ln24_6_fu_308_p1;
wire  signed [5:0] sext_ln24_8_fu_334_p1;
wire  signed [5:0] sext_ln24_9_fu_338_p1;
wire   [5:0] tmp10_fu_342_p2;
wire  signed [6:0] tmp10_cast_fu_348_p1;
wire  signed [6:0] sext_ln24_7_fu_330_p1;
wire  signed [7:0] tmp9_cast_fu_372_p1;
wire  signed [7:0] tmp8_cast_fu_369_p1;
wire   [7:0] tmp7_fu_375_p2;
wire  signed [8:0] tmp7_cast_fu_381_p1;
wire  signed [8:0] tmp1_cast_fu_366_p1;
wire  signed [5:0] sext_ln24_10_fu_358_p1;
wire  signed [5:0] sext_ln24_11_fu_362_p1;
wire  signed [5:0] sext_ln24_13_fu_401_p1;
wire  signed [5:0] sext_ln24_14_fu_405_p1;
wire   [5:0] tmp15_fu_409_p2;
wire  signed [6:0] tmp15_cast_fu_415_p1;
wire  signed [6:0] sext_ln24_12_fu_397_p1;
wire  signed [7:0] tmp14_cast_fu_436_p1;
wire  signed [7:0] tmp13_cast_fu_433_p1;
wire  signed [5:0] sext_ln24_15_fu_425_p1;
wire  signed [5:0] sext_ln24_16_fu_429_p1;
wire  signed [5:0] sext_ln24_18_fu_455_p1;
wire  signed [5:0] A_load_19_cast_fu_459_p1;
wire   [5:0] tmp19_fu_463_p2;
wire  signed [6:0] tmp19_cast_fu_469_p1;
wire  signed [6:0] sext_ln24_17_fu_451_p1;
wire  signed [7:0] tmp18_cast_fu_485_p1;
wire  signed [7:0] tmp17_cast_fu_482_p1;
wire   [7:0] tmp16_fu_488_p2;
wire  signed [8:0] tmp16_cast_fu_494_p1;
wire  signed [8:0] tmp12_cast_fu_479_p1;
wire    ap_CS_fsm_state13;
wire   [7:0] grp_fu_519_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 acc_V = 20'd0;
end

loop_pipeline_ama_addmuladd_9s_9s_8ns_20s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
ama_addmuladd_9s_9s_8ns_20s_20_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp11_reg_685),
    .din1(tmp_reg_625),
    .din2(grp_fu_519_p2),
    .din3(acc_V),
    .ce(1'b1),
    .dout(grp_fu_519_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_253 <= A_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_253 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        acc_V <= grp_fu_519_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_258 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp11_reg_685 <= tmp11_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp12_reg_670 <= tmp12_fu_439_p2;
        tmp17_reg_675 <= tmp17_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp13_reg_630 <= tmp13_fu_391_p2;
        tmp_reg_625 <= tmp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp14_reg_655 <= tmp14_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp18_reg_680 <= tmp18_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp1_reg_590 <= tmp1_fu_318_p2;
        tmp8_reg_595 <= tmp8_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp4_reg_550 <= tmp4_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp5_reg_575 <= tmp5_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp9_reg_610 <= tmp9_fu_352_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address0 = 64'd1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        A_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        A_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        A_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        A_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        A_address1 = 64'd0;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_load_19_cast_fu_459_p1 = $signed(A_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = grp_fu_519_p4;

assign grp_fu_519_p2 = 19'd190;

assign sext_ln24_10_fu_358_p1 = $signed(A_q1);

assign sext_ln24_11_fu_362_p1 = $signed(A_q0);

assign sext_ln24_12_fu_397_p1 = $signed(reg_253);

assign sext_ln24_13_fu_401_p1 = $signed(reg_258);

assign sext_ln24_14_fu_405_p1 = $signed(A_q1);

assign sext_ln24_15_fu_425_p1 = $signed(reg_253);

assign sext_ln24_16_fu_429_p1 = $signed(A_q1);

assign sext_ln24_17_fu_451_p1 = $signed(reg_253);

assign sext_ln24_18_fu_455_p1 = $signed(A_q1);

assign sext_ln24_1_fu_266_p1 = $signed(A_q0);

assign sext_ln24_2_fu_276_p1 = $signed(reg_253);

assign sext_ln24_3_fu_280_p1 = $signed(reg_258);

assign sext_ln24_4_fu_284_p1 = $signed(A_q1);

assign sext_ln24_5_fu_304_p1 = $signed(reg_253);

assign sext_ln24_6_fu_308_p1 = $signed(A_q1);

assign sext_ln24_7_fu_330_p1 = $signed(reg_253);

assign sext_ln24_8_fu_334_p1 = $signed(A_q1);

assign sext_ln24_9_fu_338_p1 = $signed(A_q0);

assign sext_ln24_fu_262_p1 = $signed(A_q1);

assign tmp10_cast_fu_348_p1 = $signed(tmp10_fu_342_p2);

assign tmp10_fu_342_p2 = ($signed(sext_ln24_8_fu_334_p1) + $signed(sext_ln24_9_fu_338_p1));

assign tmp11_fu_498_p2 = ($signed(tmp16_cast_fu_494_p1) + $signed(tmp12_cast_fu_479_p1));

assign tmp12_cast_fu_479_p1 = $signed(tmp12_reg_670);

assign tmp12_fu_439_p2 = ($signed(tmp14_cast_fu_436_p1) + $signed(tmp13_cast_fu_433_p1));

assign tmp13_cast_fu_433_p1 = $signed(tmp13_reg_630);

assign tmp13_fu_391_p2 = ($signed(sext_ln24_10_fu_358_p1) + $signed(sext_ln24_11_fu_362_p1));

assign tmp14_cast_fu_436_p1 = $signed(tmp14_reg_655);

assign tmp14_fu_419_p2 = ($signed(tmp15_cast_fu_415_p1) + $signed(sext_ln24_12_fu_397_p1));

assign tmp15_cast_fu_415_p1 = $signed(tmp15_fu_409_p2);

assign tmp15_fu_409_p2 = ($signed(sext_ln24_13_fu_401_p1) + $signed(sext_ln24_14_fu_405_p1));

assign tmp16_cast_fu_494_p1 = $signed(tmp16_fu_488_p2);

assign tmp16_fu_488_p2 = ($signed(tmp18_cast_fu_485_p1) + $signed(tmp17_cast_fu_482_p1));

assign tmp17_cast_fu_482_p1 = $signed(tmp17_reg_675);

assign tmp17_fu_445_p2 = ($signed(sext_ln24_15_fu_425_p1) + $signed(sext_ln24_16_fu_429_p1));

assign tmp18_cast_fu_485_p1 = $signed(tmp18_reg_680);

assign tmp18_fu_473_p2 = ($signed(tmp19_cast_fu_469_p1) + $signed(sext_ln24_17_fu_451_p1));

assign tmp19_cast_fu_469_p1 = $signed(tmp19_fu_463_p2);

assign tmp19_fu_463_p2 = ($signed(sext_ln24_18_fu_455_p1) + $signed(A_load_19_cast_fu_459_p1));

assign tmp1_cast_fu_366_p1 = $signed(tmp1_reg_590);

assign tmp1_fu_318_p2 = ($signed(tmp5_cast_fu_315_p1) + $signed(tmp4_cast_fu_312_p1));

assign tmp4_cast_fu_312_p1 = $signed(tmp4_reg_550);

assign tmp4_fu_270_p2 = ($signed(sext_ln24_1_fu_266_p1) + $signed(sext_ln24_fu_262_p1));

assign tmp5_cast_fu_315_p1 = $signed(tmp5_reg_575);

assign tmp5_fu_298_p2 = ($signed(tmp6_cast_fu_294_p1) + $signed(sext_ln24_2_fu_276_p1));

assign tmp6_cast_fu_294_p1 = $signed(tmp6_fu_288_p2);

assign tmp6_fu_288_p2 = ($signed(sext_ln24_3_fu_280_p1) + $signed(sext_ln24_4_fu_284_p1));

assign tmp7_cast_fu_381_p1 = $signed(tmp7_fu_375_p2);

assign tmp7_fu_375_p2 = ($signed(tmp9_cast_fu_372_p1) + $signed(tmp8_cast_fu_369_p1));

assign tmp8_cast_fu_369_p1 = $signed(tmp8_reg_595);

assign tmp8_fu_324_p2 = ($signed(sext_ln24_5_fu_304_p1) + $signed(sext_ln24_6_fu_308_p1));

assign tmp9_cast_fu_372_p1 = $signed(tmp9_reg_610);

assign tmp9_fu_352_p2 = ($signed(tmp10_cast_fu_348_p1) + $signed(sext_ln24_7_fu_330_p1));

assign tmp_fu_385_p2 = ($signed(tmp7_cast_fu_381_p1) + $signed(tmp1_cast_fu_366_p1));

endmodule //loop_pipeline
