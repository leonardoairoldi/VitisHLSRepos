-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity loop_pipeline is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (4 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of loop_pipeline is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "loop_pipeline_loop_pipeline,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.959500,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=132,HLS_SYN_LUT=440,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv19_BE : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal reg_253 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_258 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp4_fu_270_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp4_reg_550 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_reg_575 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_324_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp8_reg_595 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp9_fu_352_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp9_reg_610 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_fu_385_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_625 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp13_fu_391_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp13_reg_630 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp14_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp14_reg_655 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp17_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp18_fu_473_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp18_reg_680 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp11_fu_498_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_reg_685 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_519_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln24_1_fu_266_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_fu_262_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_3_fu_280_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_4_fu_284_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp6_fu_288_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp6_cast_fu_294_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln24_2_fu_276_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_cast_fu_315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_cast_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln24_5_fu_304_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_6_fu_308_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_8_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_9_fu_338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_cast_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln24_7_fu_330_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp9_cast_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_cast_fu_369_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp7_cast_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_366_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln24_10_fu_358_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_11_fu_362_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_13_fu_401_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_14_fu_405_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp15_fu_409_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp15_cast_fu_415_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln24_12_fu_397_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp14_cast_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_cast_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln24_15_fu_425_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_16_fu_429_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln24_18_fu_455_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_load_19_cast_fu_459_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp19_fu_463_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp19_cast_fu_469_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln24_17_fu_451_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp18_cast_fu_485_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_cast_fu_482_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_cast_fu_494_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_cast_fu_479_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component loop_pipeline_ama_addmuladd_9s_9s_8ns_20s_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    ama_addmuladd_9s_9s_8ns_20s_20_4_1_U1 : component loop_pipeline_ama_addmuladd_9s_9s_8ns_20s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 8,
        din3_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp11_reg_685,
        din1 => tmp_reg_625,
        din2 => grp_fu_519_p2,
        din3 => acc_V,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_253 <= A_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_253 <= A_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                acc_V <= grp_fu_519_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_258 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp11_reg_685 <= tmp11_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp12_reg_670 <= tmp12_fu_439_p2;
                tmp17_reg_675 <= tmp17_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp13_reg_630 <= tmp13_fu_391_p2;
                tmp_reg_625 <= tmp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp14_reg_655 <= tmp14_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp18_reg_680 <= tmp18_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp1_reg_590 <= tmp1_fu_318_p2;
                tmp8_reg_595 <= tmp8_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp4_reg_550 <= tmp4_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp5_reg_575 <= tmp5_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp9_reg_610 <= tmp9_fu_352_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        else 
            A_address0 <= "XXXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            A_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            A_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            A_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            A_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            A_address1 <= "XXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        A_load_19_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q0),6));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_519_p4;
    grp_fu_519_p2 <= ap_const_lv19_BE(8 - 1 downto 0);
        sext_ln24_10_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_11_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q0),6));

        sext_ln24_12_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),7));

        sext_ln24_13_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_258),6));

        sext_ln24_14_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_15_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),6));

        sext_ln24_16_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_17_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),7));

        sext_ln24_18_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q0),6));

        sext_ln24_2_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),7));

        sext_ln24_3_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_258),6));

        sext_ln24_4_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_5_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),6));

        sext_ln24_6_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_7_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_253),7));

        sext_ln24_8_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        sext_ln24_9_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q0),6));

        sext_ln24_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(A_q1),6));

        tmp10_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_fu_342_p2),7));

    tmp10_fu_342_p2 <= std_logic_vector(signed(sext_ln24_8_fu_334_p1) + signed(sext_ln24_9_fu_338_p1));
    tmp11_fu_498_p2 <= std_logic_vector(signed(tmp16_cast_fu_494_p1) + signed(tmp12_cast_fu_479_p1));
        tmp12_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_reg_670),9));

    tmp12_fu_439_p2 <= std_logic_vector(signed(tmp14_cast_fu_436_p1) + signed(tmp13_cast_fu_433_p1));
        tmp13_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp13_reg_630),8));

    tmp13_fu_391_p2 <= std_logic_vector(signed(sext_ln24_10_fu_358_p1) + signed(sext_ln24_11_fu_362_p1));
        tmp14_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp14_reg_655),8));

    tmp14_fu_419_p2 <= std_logic_vector(signed(tmp15_cast_fu_415_p1) + signed(sext_ln24_12_fu_397_p1));
        tmp15_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp15_fu_409_p2),7));

    tmp15_fu_409_p2 <= std_logic_vector(signed(sext_ln24_13_fu_401_p1) + signed(sext_ln24_14_fu_405_p1));
        tmp16_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp16_fu_488_p2),9));

    tmp16_fu_488_p2 <= std_logic_vector(signed(tmp18_cast_fu_485_p1) + signed(tmp17_cast_fu_482_p1));
        tmp17_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp17_reg_675),8));

    tmp17_fu_445_p2 <= std_logic_vector(signed(sext_ln24_15_fu_425_p1) + signed(sext_ln24_16_fu_429_p1));
        tmp18_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp18_reg_680),8));

    tmp18_fu_473_p2 <= std_logic_vector(signed(tmp19_cast_fu_469_p1) + signed(sext_ln24_17_fu_451_p1));
        tmp19_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_fu_463_p2),7));

    tmp19_fu_463_p2 <= std_logic_vector(signed(sext_ln24_18_fu_455_p1) + signed(A_load_19_cast_fu_459_p1));
        tmp1_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_590),9));

    tmp1_fu_318_p2 <= std_logic_vector(signed(tmp5_cast_fu_315_p1) + signed(tmp4_cast_fu_312_p1));
        tmp4_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_reg_550),8));

    tmp4_fu_270_p2 <= std_logic_vector(signed(sext_ln24_1_fu_266_p1) + signed(sext_ln24_fu_262_p1));
        tmp5_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_reg_575),8));

    tmp5_fu_298_p2 <= std_logic_vector(signed(tmp6_cast_fu_294_p1) + signed(sext_ln24_2_fu_276_p1));
        tmp6_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp6_fu_288_p2),7));

    tmp6_fu_288_p2 <= std_logic_vector(signed(sext_ln24_3_fu_280_p1) + signed(sext_ln24_4_fu_284_p1));
        tmp7_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_375_p2),9));

    tmp7_fu_375_p2 <= std_logic_vector(signed(tmp9_cast_fu_372_p1) + signed(tmp8_cast_fu_369_p1));
        tmp8_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_595),8));

    tmp8_fu_324_p2 <= std_logic_vector(signed(sext_ln24_5_fu_304_p1) + signed(sext_ln24_6_fu_308_p1));
        tmp9_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_reg_610),8));

    tmp9_fu_352_p2 <= std_logic_vector(signed(tmp10_cast_fu_348_p1) + signed(sext_ln24_7_fu_330_p1));
    tmp_fu_385_p2 <= std_logic_vector(signed(tmp7_cast_fu_381_p1) + signed(tmp1_cast_fu_366_p1));
end behav;
